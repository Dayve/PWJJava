-- RESET SCRIPT FOR PWJJ_DB --
------------------------------

-- Delete every table, procedure and function in schema: -------------------------------------------
BEGIN
	FOR cur_rec IN (
		SELECT object_name, object_type
		FROM user_objects
		WHERE object_type IN (
			'TABLE',
			'PROCEDURE',
			'FUNCTION'
		)
	)
	LOOP
		BEGIN
			IF cur_rec.object_type = 'TABLE' THEN
				EXECUTE IMMEDIATE 'DROP '|| cur_rec.object_type || ' "' || cur_rec.object_name || '" CASCADE CONSTRAINTS';
			ELSE
				EXECUTE IMMEDIATE 'DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '"';
			END IF;
			
			EXCEPTION
				WHEN OTHERS THEN
					DBMS_OUTPUT.put_line ('FAILED: DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '"');
			END;
	END LOOP;
END;
/



-- Create tables: ----------------------------------------------------------------------------------
CREATE TABLE ODPOWIEDZI (
	ID_ODP NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY,
	TRESC VARCHAR2(50) NOT NULL,
	POPRAWNOSC NUMBER(1) NOT NULL,

	CONSTRAINT ODPOWIEDZI_PK PRIMARY KEY (ID_ODP)
);

CREATE TABLE KATEGORIE (
	ID_KAT NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY,
	NAZWA_KAT VARCHAR2(40) NOT NULL UNIQUE,

	CONSTRAINT KATEGORIE_PK PRIMARY KEY (ID_KAT)
);

CREATE TABLE UZYTKOWNICY (
	ID_UZYT NUMBER(8) GENERATED BY DEFAULT ON NULL AS IDENTITY,
	LOGIN VARCHAR2(20) NOT NULL,
	HASLO VARCHAR2(40) NOT NULL,
	IMIE VARCHAR2(30)  NOT NULL,
	NAZWISKO VARCHAR2(30)  NOT NULL,

	CONSTRAINT UZYTKOWNICY_PK PRIMARY KEY (ID_UZYT)
);

CREATE TABLE PYTANIA (
	ID_PYT NUMBER(8) GENERATED BY DEFAULT ON NULL AS IDENTITY,
	TRESC VARCHAR2(60) NOT NULL,
	ID_KAT NUMBER(6) CONSTRAINT FK_KATEGORIA_PYTANIA REFERENCES KATEGORIE(ID_KAT),

	CONSTRAINT PYTANIA_PK PRIMARY KEY (ID_PYT)
);

CREATE TABLE PYTANIE_ODPOWIEDZI (
	ID_PYT NUMBER(8) CONSTRAINT FK_ODPOWIEDZ_PYTANIE REFERENCES PYTANIA(ID_PYT),
	ID_ODP NUMBER(10) CONSTRAINT FK_PYTANIE_ODPOWIEDZ REFERENCES ODPOWIEDZI(ID_ODP)
);

CREATE TABLE TESTY (
	ID_TESTU NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY,
	NAZWA_TESTU VARCHAR2(80) NOT NULL,
	OPIS_TESTU VARCHAR2(300) NOT NULL,
	LICZBA_PYTAN NUMBER(4) NOT NULL,
	LICZBA_ODPOWIEDZI NUMBER(2) NOT NULL,
	CZAS_ROZPOCZECIA DATE NOT NULL,
	CZAS_ZAKONCZENIA DATE NOT NULL,
	ID_KAT NUMBER(6) CONSTRAINT FK_KATEGORIA_TESTU REFERENCES KATEGORIE(ID_KAT),

	CONSTRAINT TESTY_PK PRIMARY KEY (ID_TESTU)
);

CREATE TABLE POSTY (
	ID_POSTA NUMBER(8) GENERATED BY DEFAULT ON NULL AS IDENTITY,
	ID_TESTU NUMBER(6) CONSTRAINT FK_POST_TEST REFERENCES TESTY(ID_TESTU),
	ID_UZYT NUMBER(8) CONSTRAINT FK_POST_UZYTKOWNIK REFERENCES UZYTKOWNICY(ID_UZYT),
	TRESC VARCHAR2(1000) NOT NULL,
	DATA_UTWORZENIA date NOT NULL,
	DATA_EDYCJI date NOT NULL,

	CONSTRAINT POSTY_PK PRIMARY KEY (ID_POSTA)
);

CREATE TABLE PYTANIA_TESTU (
	ID_PYT NUMBER(8) CONSTRAINT FK_TEST_PYTANIE REFERENCES PYTANIA(ID_PYT),
	ID_TESTU NUMBER(6) CONSTRAINT FK_ID_TESTU REFERENCES TESTY(ID_TESTU)
);

CREATE TABLE PODEJSCIA (
	ID_PODEJSCIA NUMBER(8) GENERATED BY DEFAULT ON NULL AS IDENTITY,
	WYNIK_TESTU NUMBER(3) NOT NULL, -- procent (liczba całkowita) całości możliwych punktów
	ID_TESTU NUMBER(6) CONSTRAINT FK_PODEJSCIE_DO_TESTU REFERENCES TESTY(ID_TESTU),
	ID_UZYT NUMBER(8) CONSTRAINT FK_UZYTKOWNIK_PODEJSCIE REFERENCES UZYTKOWNICY(ID_UZYT),

	CONSTRAINT PODEJSCIA_PK PRIMARY KEY (ID_PODEJSCIA)
);

CREATE TABLE PLIKI (
	ID_PLIKU NUMBER(8) GENERATED BY DEFAULT ON NULL AS IDENTITY,
	ID_TESTU NUMBER(6) CONSTRAINT FK_PLIK_TESTU REFERENCES TESTY(ID_TESTU),
	ID_UZYT NUMBER(8) CONSTRAINT FK_AUTOR_PLIKU REFERENCES UZYTKOWNICY(ID_UZYT),
	NAZWA VARCHAR2(200) NOT NULL,
	TRESC BLOB NOT NULL,
	OPIS VARCHAR2(1000) NULL,

	CONSTRAINT PLIKI_PK PRIMARY KEY (ID_PLIKU)
);

CREATE TABLE UCZESTNICY (
	ID_UCZESTNIKA NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY,
	ID_TESTU NUMBER(6) CONSTRAINT FK_UCZESTNIK_TESTU REFERENCES TESTY(ID_TESTU),
	ID_UZYT NUMBER(8) CONSTRAINT FK_UZYTKOWNIK_UCZESTNIK REFERENCES UZYTKOWNICY(ID_UZYT),
	ROLA VARCHAR2(30) NOT NULL,

	CONSTRAINT UCZESTNIK_PK PRIMARY KEY (ID_UCZESTNIKA)
);



-- Create procedures and functions: ----------------------------------------------------------------
CREATE OR REPLACE PROCEDURE add_test (
	organizerUserID IN UZYTKOWNICY.ID_UZYT % TYPE,
	testName IN TESTY.NAZWA_TESTU % TYPE,
	description IN TESTY.OPIS_TESTU % TYPE,
	numberOfQuestions IN TESTY.LICZBA_PYTAN % TYPE,
	numberOfAnswers IN TESTY.LICZBA_ODPOWIEDZI % TYPE,
	category IN KATEGORIE.NAZWA_KAT % TYPE,
	startTime IN TESTY.CZAS_ROZPOCZECIA % TYPE,
	endTime IN TESTY.CZAS_ZAKONCZENIA % TYPE
) AS
	testsCategoryID KATEGORIE.ID_KAT % TYPE;
	savedTestID TESTY.ID_TESTU % TYPE;
BEGIN
	-- Get the ID for the given category:  
	SELECT ID_KAT INTO testsCategoryID FROM KATEGORIE WHERE NAZWA_KAT = category;  

	-- Create new TEST and save its ID into savedTestID:  
	INSERT INTO TESTY (ID_TESTU, NAZWA_TESTU, OPIS_TESTU, LICZBA_PYTAN, LICZBA_ODPOWIEDZI, CZAS_ROZPOCZECIA, CZAS_ZAKONCZENIA, ID_KAT)
	VALUES (null, testName, description, numberOfQuestions, numberOfAnswers, to_date(startTime,'YYYY-MM-DD HH24:MI'), to_date(endTime,'YYYY-MM-DD HH24:MI'), testsCategoryID)    
	RETURNING ID_TESTU INTO savedTestID;

	-- Assign the chosen user as an organizer:  
	INSERT INTO UCZESTNICY (ID_UCZESTNIKA, ID_TESTU, ID_UZYT, ROLA)    
	VALUES (null, savedTestID, organizerUserID, 'organizator');  
END;
/

CREATE OR REPLACE PROCEDURE edit_post (
	postId IN NUMBER,
	newContent IN VARCHAR2,
	editor IN VARCHAR2
) AS
	editDate DATE := sysdate;  
BEGIN
	UPDATE POSTY SET   
	TRESC = newContent || '\nOstatnio edytowano: ' || to_char(editDate,'yyyy-mm-dd hh24:mi:ss') || ' przez ' || editor || '.',
	DATA_EDYCJI = editDate WHERE id_posta = postId;  
END;
/



-- Populate with data: -----------------------------------------------------------------------------

-- select to_char(TO_DATE('2017/01/30 09:10', 'RRRR-MM-DD HH24:MI'), 'RRRR-MM-DD HH24:MI') from dual;
-- select to_char(czas_zakonczenia, 'YYYY-MM-DD HH24:MI') from testy;

INSERT INTO UZYTKOWNICY (ID_UZYT, LOGIN, HASLO, IMIE, NAZWISKO)
VALUES (null, 'dp', 'a91262282f71bb8488398dcc9202f777d0206664', 'Dawid', 'Przystasz');

INSERT INTO UZYTKOWNICY (ID_UZYT, LOGIN, HASLO, IMIE, NAZWISKO)
VALUES (null, 'tk', '4f8f608ac4aafcbe4fab8dcee1e9c609f99d9332', 'Tomasz', 'Krzywonos');

INSERT INTO UZYTKOWNICY (ID_UZYT, LOGIN, HASLO, IMIE, NAZWISKO)
VALUES (null, 'js', '93f8bb0eb2c659b85694486c41717eaf0fe23cd4', 'Jan', 'Sekułowicz');

INSERT INTO KATEGORIE (ID_KAT, NAZWA_KAT)
VALUES (null, 'Programowanie wysokopoziomowe');

INSERT INTO KATEGORIE (ID_KAT, NAZWA_KAT)
VALUES (null, 'Historia Polski');

BEGIN
	add_test(
		1, -- użytkownik 1: dp
		'Test wiedzy z zakresu języka Java',
		'Test obejmuje zarówno samą składnię, jak i podstawowe narzędzia języka, takie jak kolekcje, serializacja obiektów, czy gniazda sieciowe.',
		12,
		4,
		'Programowanie wysokopoziomowe',
		TO_DATE('2017/01/31 09:40', '	YYYY-MM-DD HH24:MI'),
		TO_DATE('2017/01/31 11:50', 'YYYY-MM-DD HH24:MI')
	);

	add_test(
		1, -- użytkownik 1: dp
		'Test historyczny',
		'Przykładowy opis testu',
		8,
		3,
		'Historia Polski',
		TO_DATE('2017/01/30 09:10', 'YYYY-MM-DD HH24:MI'),
		TO_DATE('2017/01/30 13:50', 'YYYY-MM-DD HH24:MI')
	);
END;
/


